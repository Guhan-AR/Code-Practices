################################################################################
#                                                                              #
#      COMPLETE GUIDE: Full-Stack CRUD App with File Uploads                   #
#      -------------------------------------------------------                 #
#      Frontend: React.js (with Vite)                                          #
#      Backend:  Django REST Framework (DRF)                                   #
#                                                                              #
################################################################################


================================================================================
  PART 1: The Django REST Framework Backend (The "Brain" and "Warehouse")
================================================================================

Our backend API is responsible for all the logic: creating, reading, updating,
and deleting posts. It's also our "warehouse," responsible for receiving
and storing the image files.

---
[ 1.1 ] Backend Project Setup
---

First, we set up our project folder and a virtual environment. A virtual
environment is crucial because it isolates our project's specific packages
from other Python projects on your system.

# In your terminal:
mkdir drf-file-upload-backend
cd drf-file-upload-backend
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Now, install the necessary libraries:
# - django: The core web framework.
# - djangorestframework: The toolkit for building APIs.
# - Pillow: A library for image processing, required by Django's ImageField.
# - django-cors-headers: To allow our React app to talk to our API.
pip install django djangorestframework Pillow django-cors-headers

# Create the Django project and a "posts" app:
django-admin startproject backend .
python manage.py startapp posts


---
[ 1.2 ] Django Configuration (backend/settings.py)
---

This file is the main control panel for our Django project.

# Open backend/settings.py and make these additions:

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # --- Additions ---
    'rest_framework',      # Add the REST Framework app.
    'corsheaders',         # Add the CORS headers app.
    'posts',               # Add our new 'posts' app.
]

MIDDLEWARE = [
    # Add CorsMiddleware right near the top. It needs to process
    # the request before most other middleware to add the correct headers.
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add this at the bottom of the file.
# This tells Django that it's safe to accept requests from our
# React development server, which runs on port 5173 by default.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

# Add this at the bottom of the file to handle user-uploaded files.
# This is a critical part of the file upload process.
import os

# MEDIA_URL: The public URL that browsers will use to request the files.
# It's the prefix for the file's path. e.g., http://localhost:8000/media/image.jpg
MEDIA_URL = '/media/'

# MEDIA_ROOT: The absolute path on the server's hard drive where the
# uploaded files will be physically stored. Django will save files here.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


---
[ 1.3 ] Project URLs (backend/urls.py)
---

This is the main "switchboard" for our entire project. It directs incoming
web requests to the correct app.

# Replace the contents of backend/urls.py with this:

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    # Any request to '/api/...' will be handed over to our 'posts' app's URL configuration.
    path('api/', include('posts.urls')),
]

# This is a helper that Django provides for development ONLY.
# It tells Django's development server how to serve the files
# that users upload to the MEDIA_ROOT directory.
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


---
[ 1.4 ] The Post Model (posts/models.py)
---

A model is the blueprint for our database table. It defines the fields
and behaviors of our data.

# Add this code to posts/models.py:

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    
    # ImageField is a special field for file uploads.
    # upload_to='post_images/': This is where the magic happens. When a file
    # is uploaded, Django will save it inside your MEDIA_ROOT folder,
    # in a subdirectory named 'post_images'.
    # blank=True, null=True: These make the image field optional. Users can
    # create a post without an image.
    image = models.ImageField(upload_to='post_images/', blank=True, null=True)

    def __str__(self):
        return self.title


---
[ 1.5 ] The Post Serializer (posts/serializers.py)
---

A serializer is a "translator." It converts complex data types, like our Post
model instances, into a format that can be easily sent over the internet (JSON).
It also does the reverse: converting incoming JSON into valid data for our model.

# Create a new file `posts/serializers.py` and add this code:

from rest_framework import serializers
from .models import Post

# ModelSerializer is a shortcut that automatically builds a serializer
# with fields that correspond to the Model's fields.
class PostSerializer(serializers.ModelSerializer):
    class Meta:
        # model: Links this serializer directly to the Post model. THIS IS REQUIRED.
        model = Post
        # fields: A list of all the fields from the model we want to include
        # in the API representation.
        fields = ['id', 'title', 'content', 'image']


---
[ 1.6 ] The Post View (posts/views.py)
---

A view contains the actual logic for handling a request and returning a
response. It connects our models and serializers to API endpoints.

# Replace the contents of posts/views.py with this:

from rest_framework import viewsets
from .models import Post
from .serializers import PostSerializer
# We need to import the parsers that can handle file uploads.
from rest_framework.parsers import MultiPartParser, FormParser

# A ModelViewSet is another powerful shortcut from DRF. It automatically
# provides all the standard CRUD (Create, Retrieve, Update, Destroy) actions.
class PostViewSet(viewsets.ModelViewSet):
    # The set of data that this view will operate on.
    queryset = Post.objects.all().order_by('-id')
    # The serializer class to use for validating and de/serializing data.
    serializer_class = PostSerializer
    
    # This is the KEY for making file uploads work. We tell the view
    # that it should be able to parse "multipart/form-data" requests,
    # which is the format browsers use to send files.
    parser_classes = (MultiPartParser, FormParser)


---
[ 1.7 ] App URLs (posts/urls.py)
---

This file defines the specific URL endpoints for our 'posts' app.

# Create a new file `posts/urls.py` and add this code:

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import PostViewSet

# DefaultRouter is a fantastic DRF tool that automatically generates the
# URL patterns for our ViewSet. We don't have to write each one by hand.
router = DefaultRouter()
router.register(r'posts', PostViewSet, basename='post')

# The router generates URLs like:
# /api/posts/       - for listing all posts (GET) and creating a new post (POST)
# /api/posts/{id}/  - for retrieving (GET), updating (PUT/PATCH), and deleting (DELETE) a single post

urlpatterns = [
    path('', include(router.urls)),
]


---
[ 1.8 ] Final Backend Steps: Migrations & Running the Server
---

Now we tell Django to create the database table based on our model and then
start the server.

# In your terminal (make sure the venv is active):
# makemigrations: Creates the instructions for building the database table.
python manage.py makemigrations

# migrate: Executes the instructions and creates/updates the database.
python manage.py migrate

# runserver: Starts the development server.
python manage.py runserver

# Your backend API is now live at http://127.0.0.1:8000/


################################################################################
#                                                                              #
#      DEEP DIVE: How Image/File Handling *Really* Works (Beginner View)       #
#                                                                              #
################################################################################

This process can seem like magic, but it's a logical flow. Let's trace an image's journey
from your computer to being displayed back to you.

We'll use an analogy: Sending a physical item (an image) and a letter (title, content) in a special package.

-----------------------------
**STEP 1: PACKAGING (in React)**
-----------------------------
You can't send a physical item (a file) inside a normal letter (a JSON object). JSON is only for text.
You need a special shipping box. In web development, this box is called **`FormData`**.

1.  **The User Selects a File:** The user clicks `<input type="file" />` and picks `my_photo.jpg`. React stores this file object.

2.  **You Prepare the `FormData` Box:** When the user hits "Submit," your React code does this:
    ```javascript
    const formData = new FormData(); // You grab an empty shipping box.
    formData.append('title', 'Beach Day'); // You put a labeled sticky note in the box.
    formData.append('content', 'It was sunny!'); // You put another labeled note in.
    formData.append('image', myImageFile); // You put the actual photo in the box with the label "image".
    ```
    The labels (`title`, `content`, `image`) are VERY important. Django will look for these labels when it unpacks the box.

-----------------------------
**STEP 2: SHIPPING (The API Request)**
-----------------------------
Your React app sends this `FormData` box to the Django API. When you send `FormData`, the browser automatically does something crucial:

- It attaches a special shipping label to the outside of the box:
  **`Content-Type: multipart/form-data`**

This label tells the receiving server, "Warning! This is not a simple letter (JSON). This is a special package with multiple parts (files and text data)."

-----------------------------
**STEP 3: UNPACKING (in Django)**
-----------------------------
1.  **The "Loading Dock" (`MultiPartParser`):** Your Django view has `parser_classes = (MultiPartParser, ...)`. When Django sees the `multipart/form-data` shipping label, it knows to use this special "parser" to open and unpack the box. It reads the labels on each item inside.

2.  **Handing Off to the "Inspector" (`Serializer`):** The unpacked items are given to your `PostSerializer`. The serializer looks at the items:
    - It sees an item labeled `title` with the text "Beach Day".
    - It sees an item labeled `content` with the text "It was sunny!".
    - It sees an item labeled `image` containing the actual data for `my_photo.jpg`.

-----------------------------
**STEP 4: STORING (Model and Filesystem)**
-----------------------------
This is the most important concept to understand. Django does two separate things:

1.  **The File Goes to the "Warehouse" (Filesystem):**
    - Your `Post` model has `image = ImageField(upload_to='post_images/')`.
    - Django sees this and knows what to do with the actual file.
    - It goes to your `MEDIA_ROOT` folder (e.g., `.../backend/media/`).
    - It creates the `post_images/` subdirectory if it doesn't exist.
    - It saves the actual file there: `.../backend/media/post_images/my_photo.jpg`.

2.  **The Path Goes to the "Inventory Log" (Database):**
    - The DATABASE **DOES NOT STORE THE IMAGE!** Storing large files in a database is inefficient.
    - Instead, it stores a simple piece of TEXT that says where the file is located.
    - In your database's `posts_post` table, the `image` column for this new entry will just contain the string: **`"post_images/my_photo.jpg"`**.

-----------------------------
**STEP 5: REPORTING BACK (The API Response)**
-----------------------------
When your React app later asks for the list of posts (a GET request), the following happens:

1.  Django retrieves the post from the database. It sees the `title`, `content`, and the `image` path (`post_images/my_photo.jpg`).
2.  The `PostSerializer` prepares the JSON response.
3.  When it gets to the `image` field, it's smart. It knows it shouldn't just send back the path. The frontend needs a full URL it can use in an `<img src="...">` tag.
4.  It takes the `MEDIA_URL` from your `settings.py` (`'/media/'`) and combines it with the path from the database.
5.  The final JSON sent back to React looks like this:
    ```json
    {
      "id": 1,
      "title": "Beach Day",
      "content": "It was sunny!",
      "image": "http://127.0.0.1:8000/media/post_images/my_photo.jpg"
    }
    ```
Your React app can now take this full URL and use it directly to display the image.


================================================================================
  PART 2: The React Frontend (The "Face" of the Application)
================================================================================

This is the user interface. It displays data from the API and provides forms
for users to interact with that data.

---
[ 2.1 ] Frontend Project Setup
---

# Open a NEW terminal window (leave the Django server running).

# Use Vite to scaffold a new React project.
npm create vite@latest react-file-upload-frontend -- --template react

# Navigate into the new project directory.
cd react-file-upload-frontend

# Install dependencies, including 'axios' for making API requests.
npm install
npm install axios


---
[ 2.2 ] The Main Application Component (src/App.jsx)
---

This single component will handle all of our frontend logic for CRUD.

# Replace the entire contents of `src/App.jsx` with this code:

import { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';

// The URL of our Django API.
const API_URL = 'http://127.0.0.1:8000/api/posts/';

function App() {
  // State variables to manage our application's data and UI state.
  const [posts, setPosts] = useState([]); // To store the list of all posts.
  const [isEditing, setIsEditing] = useState(false); // To toggle the form between 'Create' and 'Edit' mode.
  const [currentPost, setCurrentPost] = useState({ id: null, title: '', content: '' }); // To hold form data.
  const [imageFile, setImageFile] = useState(null); // To hold the selected file for upload.

  // useEffect hook to fetch posts when the component first loads.
  // The empty dependency array `[]` means this runs only once.
  useEffect(() => {
    fetchPosts();
  }, []);

  // Function to get all posts from the API.
  const fetchPosts = async () => {
    try {
      const response = await axios.get(API_URL);
      setPosts(response.data); // Update our 'posts' state with the fetched data.
    } catch (error) {
      console.error("There was an error fetching the posts:", error);
    }
  };

  // Function to handle changes in the text inputs of the form.
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCurrentPost({ ...currentPost, [name]: value });
  };

  // Function to handle the selection of a file.
  const handleFileChange = (e) => {
    // e.target.files is an array-like object; we want the first file.
    setImageFile(e.target.files[0]);
  };

  // Function to handle form submission for both creating and updating.
  const handleSubmit = async (e) => {
    e.preventDefault(); // Prevent the default browser form submission.

    // We must use FormData when we want to send files.
    const formData = new FormData();
    formData.append('title', currentPost.title);
    formData.append('content', currentPost.content);
    // Only append the image if a new one was selected.
    if (imageFile) {
      formData.append('image', imageFile);
    }

    try {
      if (isEditing) {
        // If we are editing, send a PUT request to the specific post's URL.
        // We use PUT here to replace the entire object. PATCH could be used for partial updates.
        await axios.put(`${API_URL}${currentPost.id}/`, formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
      } else {
        // If we are creating, send a POST request to the main posts URL.
        await axios.post(API_URL, formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
      }
      // After successful submission, reset the form and refresh the list of posts.
      resetForm();
      fetchPosts();
    } catch (error) {
      console.error("There was an error submitting the form:", error.response.data);
    }
  };

  // Function to populate the form with a post's data for editing.
  const handleEdit = (post) => {
    setIsEditing(true); // Switch to 'Edit' mode.
    setCurrentPost({ id: post.id, title: post.title, content: post.content }); // Load post data into the form.
    setImageFile(null); // Clear any previously selected file.
  };

  // Function to delete a post.
  const handleDelete = async (id) => {
    try {
      await axios.delete(`${API_URL}${id}/`);
      fetchPosts(); // Refresh the posts list to show the deletion.
    } catch (error) {
      console.error("There was an error deleting the post:", error);
    }
  };

  // Function to clear the form and reset it to 'Create' mode.
  const resetForm = () => {
    setIsEditing(false);
    setCurrentPost({ id: null, title: '', content: '' });
    setImageFile(null);
    document.querySelector('input[type="file"]').value = ''; // Clear the file input visually
  };

  return (
    <div className="app-container">
      <h1>Post It!</h1>

      {/* The main form for creating and editing posts */}
      <form onSubmit={handleSubmit} className="post-form">
        <h2>{isEditing ? 'Edit Post' : 'Create a New Post'}</h2>
        <input
          type="text"
          name="title"
          value={currentPost.title}
          onChange={handleInputChange}
          placeholder="Title"
          required
        />
        <textarea
          name="content"
          value={currentPost.content}
          onChange={handleInputChange}
          placeholder="Content"
          required
        />
        <input type="file" onChange={handleFileChange} />
        <div className="form-buttons">
          <button type="submit">{isEditing ? 'Update' : 'Create'}</button>
          {isEditing && <button type="button" onClick={resetForm}>Cancel</button>}
        </div>
      </form>

      {/* The section where we display the list of posts */}
      <div className="posts-list">
        <h2>All Posts</h2>
        {posts.map((post) => (
          <div key={post.id} className="post-item">
            <h3>{post.title}</h3>
            <p>{post.content}</p>
            {/* Conditionally render the image only if it exists */}
            {post.image && (
              <img
                // The `src` is the full URL provided by our DRF backend!
                src={post.image}
                alt={post.title}
                className="post-image"
              />
            )}
            <div className="post-actions">
              <button onClick={() => handleEdit(post)}>Edit</button>
              <button onClick={() => handleDelete(post.id)}>Delete</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default App;


---
[ 2.3 ] Basic Styling (src/App.css)
---

# Replace the contents of `src/App.css` with this for a better look.

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  background-color: #f4f7f6;
  color: #333;
  line-height: 1.6;
}

.app-container {
  max-width: 800px;
  margin: 2rem auto;
  padding: 1rem 2rem;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

h1, h2 {
  color: #2c3e50;
  text-align: center;
}

/* Form Styles */
.post-form {
  margin-bottom: 2rem;
  padding: 1.5rem;
  border: 1px solid #ddd;
  border-radius: 8px;
  background-color: #fafafa;
}

.post-form input[type="text"],
.post-form textarea {
  width: 100%;
  padding: 0.8rem;
  margin-bottom: 1rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.post-form input[type="file"] {
  margin-bottom: 1rem;
}

.form-buttons {
  display: flex;
  gap: 1rem;
}

button {
  padding: 0.7rem 1.5rem;
  border: none;
  border-radius: 4px;
  color: #fff;
  background-color: #3498db;
  cursor: pointer;
  transition: background-color 0.2s;
}

button:hover {
  background-color: #2980b9;
}

button[type="button"] {
  background-color: #95a5a6;
}

button[type="button"]:hover {
  background-color: #7f8c8d;
}

/* Posts List Styles */
.posts-list {
  margin-top: 2rem;
}

.post-item {
  background: #fdfdfd;
  padding: 1.5rem;
  margin-bottom: 1rem;
  border: 1px solid #e1e1e1;
  border-radius: 8px;
}

.post-item h3 {
  margin-top: 0;
  color: #2980b9;
}

.post-image {
  max-width: 100%;
  height: auto;
  border-radius: 4px;
  margin-top: 1rem;
}

.post-actions {
  margin-top: 1rem;
  display: flex;
  gap: 1rem;
}

.post-actions button {
  background-color: #e74c3c;
}

.post-actions button:first-of-type {
  background-color: #f39c12;
}

.post-actions button:first-of-type:hover {
  background-color: #e67e22;
}

.post-actions button:hover {
  background-color: #c0392b;
}


---
[ 2.4 ] Run the React App
---

# In your frontend terminal (react-file-upload-frontend directory):
npm run dev

# Your frontend is now running at http://localhost:5173

You now have a complete, working full-stack application!